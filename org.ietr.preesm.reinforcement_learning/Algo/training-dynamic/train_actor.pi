<?xml version="1.0" encoding="UTF-8"?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns">
    <key attr.name="parameters" for="graph" id="parameters"/>
    <key attr.name="variables" for="graph" id="variables"/>
    <key attr.name="arguments" for="node" id="arguments"/>
    <key attr.name="name" attr.type="string" for="graph"/>
    <key attr.name="graph_desc" attr.type="string" for="node"/>
    <key attr.name="delay" attr.type="string" for="edge"/>
    <graph edgedefault="directed">
        <data key="name">train_actor</data>
        <node
            expr="input_size * hidden_size + hidden_size * output_size"
            id="weights_size" kind="param"/>
        <node id="hidden_size" kind="cfg_in_iface"/>
        <node id="output_size" kind="cfg_in_iface"/>
        <node expr="hidden_size + output_size" id="bias_size" kind="param"/>
        <node id="input_size" kind="cfg_in_iface"/>
        <node expr="0" id="N" kind="param"/>
        <node id="MPL_Update" kind="actor">
            <data key="graph_desc">Algo/training-dynamic/network_train_iter.pi</data>
            <port kind="cfg_input" name="input_size"/>
            <port kind="cfg_input" name="hidden_size"/>
            <port kind="cfg_input" name="output_size"/>
            <port kind="cfg_input" name="N"/>
            <port annotation="NONE"
                expr="(input_size * hidden_size + hidden_size * output_size) * (N > 0)"
                kind="input" name="weights"/>
            <port annotation="NONE"
                expr="(hidden_size + output_size) * (N > 0)"
                kind="input" name="bias"/>
            <port annotation="NONE" expr="input_size * (N > 0)"
                kind="input" name="inputs"/>
            <port annotation="NONE" expr="output_size * (N > 0)"
                kind="input" name="targets"/>
            <port annotation="NONE" expr="(N > 0)" kind="input" name="learning_rate"/>
            <port annotation="NONE" expr="N > 0" kind="input" name="iter_in"/>
            <port annotation="NONE"
                expr="(input_size * hidden_size + hidden_size * output_size) * (N > 0)"
                kind="output" name="weights_out"/>
            <port annotation="NONE"
                expr="(hidden_size + output_size) * (N > 0)"
                kind="output" name="bias_out"/>
        </node>
        <node id="targets" kind="src">
            <port annotation="NONE" expr="output_size"
                kind="output" name="targets"/>
        </node>
        <node id="inputs" kind="src">
            <port annotation="NONE" expr="input_size"
                kind="output" name="inputs"/>
        </node>
        <node id="delta" kind="src">
            <port annotation="NONE" expr="1" kind="output" name="delta"/>
        </node>
        <node id="learning_rate" kind="src">
            <port annotation="NONE" expr="1" kind="output" name="learning_rate"/>
        </node>
        <node id="bias" kind="src">
            <port annotation="NONE" expr="bias_size"
                kind="output" name="bias"/>
        </node>
        <node id="weights" kind="src">
            <port annotation="NONE" expr="weights_size"
                kind="output" name="weights"/>
        </node>
        <node id="bias_out" kind="snk">
            <port annotation="NONE" expr="bias_size" kind="input" name="bias_out"/>
        </node>
        <node id="weights_out" kind="snk">
            <port annotation="NONE" expr="weights_size"
                kind="input" name="weights_out"/>
        </node>
        <node id="setNUpdate" kind="actor">
            <data key="graph_desc">spider2/include/actor.h</data>
            <loop name="setNumberOfUpdate">
                <param direction="IN" isConfig="false"
                    name="delta" type="float "/>
                <param direction="IN" isConfig="false"
                    name="variance" type="float "/>
                <param direction="OUT" isConfig="false"
                    name="updateVariance" type="float "/>
                <param direction="OUT" isConfig="true" name="N" type="Param "/>
            </loop>
            <port annotation="NONE" kind="cfg_output" name="N"/>
            <port annotation="NONE" expr="1" kind="input" name="delta"/>
            <port annotation="NONE" expr="1" kind="input" name="variance"/>
            <port annotation="NONE" expr="1" kind="output" name="updateVariance"/>
        </node>
        <node id="Iterator" kind="actor">
            <data key="graph_desc">spider2/include/actor.h</data>
            <loop name="actorUpdateIterator">
                <param direction="OUT" isConfig="false"
                    name="out" type="int "/>
            </loop>
            <port kind="cfg_input" name="N"/>
            <port annotation="NONE" expr="N" kind="output" name="out"/>
        </node>
        <node id="SwitchInputs" kind="fork">
            <port kind="cfg_input" name="N"/>
            <port kind="cfg_input" name="input_size"/>
            <port annotation="NONE" expr="input_size"
                kind="input" name="in"/>
            <port annotation="NONE" expr="(N > 0) * input_size"
                kind="output" name="update"/>
            <port annotation="NONE" expr="(N == 0) * input_size"
                kind="output" name="sink"/>
        </node>
        <node id="sinkInputs" kind="end">
            <port kind="cfg_input" name="N"/>
            <port kind="cfg_input" name="input_size"/>
            <port annotation="READ_ONLY"
                expr="(N == 0) * input_size" kind="input" name="in"/>
        </node>
        <node id="sinkLearning_Rate" kind="end">
            <port kind="cfg_input" name="N"/>
            <port annotation="READ_ONLY" expr="(N == 0)"
                kind="input" name="in"/>
        </node>
        <node id="SwitchLearning_Rate" kind="fork">
            <port kind="cfg_input" name="N"/>
            <port annotation="NONE" expr="1" kind="input" name="in"/>
            <port annotation="NONE" expr="(N > 0)" kind="output" name="update"/>
            <port annotation="NONE" expr="(N == 0) "
                kind="output" name="sink"/>
        </node>
        <node id="SwitchTargets" kind="fork">
            <port kind="cfg_input" name="output_size"/>
            <port kind="cfg_input" name="N"/>
            <port annotation="NONE" expr="output_size"
                kind="input" name="in"/>
            <port annotation="NONE" expr="(N > 0) * output_size"
                kind="output" name="update"/>
            <port annotation="NONE" expr="(N == 0) * output_size"
                kind="output" name="sink"/>
        </node>
        <node id="sinkTargets" kind="end">
            <port kind="cfg_input" name="output_size"/>
            <port kind="cfg_input" name="N"/>
            <port annotation="READ_ONLY"
                expr="(N == 0) * output_size" kind="input" name="in"/>
        </node>
        <node expr="weights_size" getter="weights_out"
            id="MPL_Update_weights_out__MPL_Update_weights"
            kind="delay" level="none" setter="weights">
            <port annotation="NONE" expr="weights_size"
                kind="input" name="set"/>
            <port annotation="NONE" expr="weights_size"
                kind="output" name="get"/>
        </node>
        <node expr="bias_size" getter="bias_out"
            id="MPL_Update_bias_out__MPL_Update_bias"
            kind="delay" level="none" setter="bias">
            <port annotation="NONE" expr="bias_size" kind="input" name="set"/>
            <port annotation="NONE" expr="bias_size"
                kind="output" name="get"/>
        </node>
        <node expr="1" getter=""
            id="setNUpdate_updateVariance__setNUpdate_variance"
            kind="delay" level="permanent" setter="">
            <port annotation="NONE" expr="1" kind="input" name="set"/>
            <port annotation="NONE" expr="1" kind="output" name="get"/>
        </node>
        <edge expr="weights_size" kind="fifo" source="MPL_Update"
            sourceport="weights_out" target="MPL_Update"
            targetport="weights" type="float">
            <data key="delay">MPL_Update_weights_out__MPL_Update_weights</data>
        </edge>
        <edge expr="bias_size" kind="fifo" source="MPL_Update"
            sourceport="bias_out" target="MPL_Update"
            targetport="bias" type="float">
            <data key="delay">MPL_Update_bias_out__MPL_Update_bias</data>
        </edge>
        <edge expr="1" kind="fifo" source="setNUpdate"
            sourceport="updateVariance" target="setNUpdate"
            targetport="variance" type="float">
            <data key="delay">setNUpdate_updateVariance__setNUpdate_variance</data>
        </edge>
        <edge kind="fifo" source="weights" sourceport="weights"
            target="MPL_Update_weights_out__MPL_Update_weights"
            targetport="set" type="float"/>
        <edge kind="fifo" source="bias" sourceport="bias"
            target="MPL_Update_bias_out__MPL_Update_bias"
            targetport="set" type="float"/>
        <edge kind="fifo"
            source="MPL_Update_weights_out__MPL_Update_weights"
            sourceport="get" target="weights_out"
            targetport="weights_out" type="float"/>
        <edge kind="fifo"
            source="MPL_Update_bias_out__MPL_Update_bias"
            sourceport="get" target="bias_out"
            targetport="bias_out" type="float"/>
        <edge kind="fifo" source="delta" sourceport="delta"
            target="setNUpdate" targetport="delta" type="float"/>
        <edge kind="fifo" source="Iterator" sourceport="out"
            target="MPL_Update" targetport="iter_in" type="int"/>
        <edge kind="fifo" source="inputs" sourceport="inputs"
            target="SwitchInputs" targetport="in" type="float"/>
        <edge kind="fifo" source="SwitchInputs"
            sourceport="update" target="MPL_Update"
            targetport="inputs" type="float"/>
        <edge kind="fifo" source="SwitchInputs" sourceport="sink"
            target="sinkInputs" targetport="in" type="float"/>
        <edge kind="fifo" source="targets" sourceport="targets"
            target="SwitchTargets" targetport="in" type="float"/>
        <edge kind="fifo" source="SwitchTargets"
            sourceport="update" target="MPL_Update"
            targetport="targets" type="float"/>
        <edge kind="fifo" source="SwitchTargets"
            sourceport="sink" target="sinkTargets"
            targetport="in" type="float"/>
        <edge kind="fifo" source="learning_rate"
            sourceport="learning_rate"
            target="SwitchLearning_Rate" targetport="in" type="float"/>
        <edge kind="fifo" source="SwitchLearning_Rate"
            sourceport="update" target="MPL_Update"
            targetport="learning_rate" type="float"/>
        <edge kind="fifo" source="SwitchLearning_Rate"
            sourceport="sink" target="sinkLearning_Rate"
            targetport="in" type="float"/>
        <edge kind="dependency" source="hidden_size" target="bias_size"/>
        <edge kind="dependency" source="hidden_size" target="weights_size"/>
        <edge kind="dependency" source="output_size" target="bias_size"/>
        <edge kind="dependency" source="input_size" target="weights_size"/>
        <edge kind="dependency" source="output_size" target="weights_size"/>
        <edge kind="dependency" source="weights_size" target="MPL_Update_weights_out__MPL_Update_weights"/>
        <edge kind="dependency" source="bias_size" target="MPL_Update_bias_out__MPL_Update_bias"/>
        <edge kind="dependency" source="input_size" target="inputs"/>
        <edge kind="dependency" source="output_size" target="targets"/>
        <edge kind="dependency" source="bias_size" target="bias"/>
        <edge kind="dependency" source="weights_size" target="weights"/>
        <edge kind="dependency" source="weights_size" target="weights_out"/>
        <edge kind="dependency" source="bias_size" target="bias_out"/>
        <edge kind="dependency" source="setNUpdate"
            sourceport="N" target="N"/>
        <edge kind="dependency" source="N" target="Iterator" targetport="N"/>
        <edge kind="dependency" source="output_size"
            target="sinkTargets" targetport="output_size"/>
        <edge kind="dependency" source="N" target="sinkTargets" targetport="N"/>
        <edge kind="dependency" source="N" target="SwitchInputs" targetport="N"/>
        <edge kind="dependency" source="input_size"
            target="SwitchInputs" targetport="input_size"/>
        <edge kind="dependency" source="output_size"
            target="SwitchTargets" targetport="output_size"/>
        <edge kind="dependency" source="N" target="SwitchTargets" targetport="N"/>
        <edge kind="dependency" source="N"
            target="SwitchLearning_Rate" targetport="N"/>
        <edge kind="dependency" source="N"
            target="sinkLearning_Rate" targetport="N"/>
        <edge kind="dependency" source="N" target="sinkInputs" targetport="N"/>
        <edge kind="dependency" source="input_size"
            target="sinkInputs" targetport="input_size"/>
        <edge kind="dependency" source="N" target="MPL_Update" targetport="N"/>
        <edge kind="dependency" source="output_size"
            target="MPL_Update" targetport="output_size"/>
        <edge kind="dependency" source="input_size"
            target="MPL_Update" targetport="input_size"/>
        <edge kind="dependency" source="hidden_size"
            target="MPL_Update" targetport="hidden_size"/>
    </graph>
</graphml>
