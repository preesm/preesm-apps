
var MultiProc = xdc.useModule('ti.sdo.utils.MultiProc');
var Memory = xdc.useModule('xdc.runtime.Memory');

/*
 *  Get the list of names that the build device supports.
 *  I.e. ["CORE0", "CORE1", "CORE2" ... ]
 */
var nameList = MultiProc.getDeviceProcNames();

/* 
 *  Since this is a single-image example, we don't (at build-time) which 
 *  processor we're building for.  We therefore supply 'null' 
 *  as the local procName and allow IPC to set the local procId at runtime.
 */
MultiProc.setConfig(null, nameList);
                           
/* 
 *  The SysStd System provider is a good one to use for debugging 
 *  but does not have the best performance. Use xdc.runtime.SysMin
 *  for better performance.
 */
var System   = xdc.useModule('xdc.runtime.System');
var SysStd   = xdc.useModule('xdc.runtime.SysStd');
System.SupportProxy = SysStd;
/* Support for %f in printf */
System.extendedFormats = "%f%$S"; 

/* Modules explicitly used in the application */
var MessageQ    = xdc.useModule('ti.sdo.ipc.MessageQ');
var Ipc         = xdc.useModule('ti.sdo.ipc.Ipc');
var HeapBufMP   = xdc.useModule('ti.sdo.ipc.heaps.HeapBufMP');
var MultiProc   = xdc.useModule('ti.sdo.utils.MultiProc');
var Notify = xdc.useModule('ti.sdo.ipc.Notify');
var Timestamp = xdc.useModule('xdc.runtime.Timestamp');


/* BIOS/XDC modules */
var BIOS        = xdc.useModule('ti.sysbios.BIOS');
BIOS.heapSize   = 0x8000;
var Task        = xdc.useModule('ti.sysbios.knl.Task');

var tsk0 = Task.create('&tsk0_func');
tsk0.instance.name = "tsk0";

/* Synchronize all processors (this will be done in Ipc_start) */
Ipc.procSync = Ipc.ProcSync_ALL;

/* Shared Memory base address and length */
var SHAREDMEM           = 0x0C000000;
var SHAREDMEMSIZE       = 0x000FFFFC; // 1 MByte - 4 byte

/* 
 *  Need to define the shared region. The IPC modules use this
 *  to make portable pointers. All processors need to add this
 *  call with their base address of the shared memory region.
 *  If the processor cannot access the memory, do not add it.
 */ 
var SharedRegion = xdc.useModule('ti.sdo.ipc.SharedRegion');
SharedRegion.setEntryMeta(0,
    { base: SHAREDMEM, 
      len:  SHAREDMEMSIZE,
      ownerProcId: 0,
      isValid: true,
      name: "DDR2 RAM",
    });
    
/* Create a heap */ 
/* Uncomment the following lines only if you are using the dynamic allocation 
var HeapMemMP = xdc.useModule('ti.sdo.ipc.heaps.HeapMemMP'); 
SharedRegion.setEntryMeta(1,
    { base: 0x80000000, 
      len:  0x10000000,
      ownerProcId: 0,
      isValid: true,
      name: "DDR3",
      createHeap: true,
    }); 
    */
 

/** SharedMemory Section */
Program.sectMap[".mySharedMem"] = "SHARED_NO_CACHE";
Program.sectMap[".MSMCSRAM"] = "MSMCSRAM";

/** Const Section DDR3*/
Program.sectMap[".myConstMem"] = "SHARED_NO_CACHE";

Program.sectMap[".myInputVideoMem"] = new Program.SectionSpec();
Program.sectMap[".myInputVideoMem"].loadSegment ="SHARED_NO_CACHE"; 
Program.sectMap[".myInputVideoMem"].type = "NOINIT";
