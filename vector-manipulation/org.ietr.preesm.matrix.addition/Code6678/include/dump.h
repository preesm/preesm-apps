/*
	============================================================================
	Name        : dump.h
	Author      : kdesnos
	Version     :
	Copyright   : CECILL-C
	Description : Function called by code generated by the Instrumented C
                  Printer of Preesm
	============================================================================
*/

#ifndef DUMP_H
#define DUMP_H

/**
* Character string pointing to the "analysis.csv" file generated by Preesm
* Instrumented C printer
*/
#define DUMP_FILE "../../../Code/generated/analysis.csv"

/**
* Function used to dump the current processor time to the appropriate
* place in the dumpBuffer.
*
* @param id
*       The id of the current dump. Each id corresponds to a unique instant
*       of the schedule generated by Preesm.
* @param dumpBuffer
*       This buffer stores all the timings dumped by calling the dumpTime
        function. This timings will be analyzed by the writeTime function.
*/
void dumpTime(int id, int* dumpBuffer);

/**
* Function used to analyze the timings dumped in the dumpBuffer and write the
* result to the DUMP_FILE file.
*
* @param dumpBuffer
*        This buffer stores all the timings dumped by calling the dumpTime
*        function. This timings will be analyzed by the writeTime function.
*
* @param nbDump
*        Total number of dumps of the program (i.e. size of dumpBuffer and
*        nbExec arrays)
*
* @param nbExec
*        This array stores a unique value for each dumpId corresponding to
*        the number of times the function/actor preceeding this dump should be
*        executed in order to get a significant time measure. This parameter
*        is updated when calling the writeTime function.
*/
void writeTime(int* dumpBuffer, int nbDump, int* nbExec);

/**
* Function used to initialize the analysis mechanism.
* This function:
* - Initialises the nbExec array with unitary values
* - Opens/Creates the analysis csv file.
*
* @param nbExec
*        This array stores a unique value for each dumpId corresponding to
*        the number of times the function/actor preceeding this dump should be
*        executed in order to get a significant time measure. This parameter
*        is updated when calling the writeTime function.
* @param nbDump
*        Total number of dumps of the program (i.e. size of dumpBuffer and
*        nbExec arrays)
*/
void initNbExec(int* nbExec, int nbDump);

#endif
